{"version":3,"sources":["./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/utils/utils.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;;;;;;;;;ACN5D,MAAM,YAAY;IAIvB,YACU,KAAY;QAAZ,UAAK,GAAL,KAAK,CAAO;IACpB,CAAC;IAEH,QAAQ;QACN,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC;IAC1C,CAAC;;wEAVU,YAAY;4FAAZ,YAAY;QCTzB,uDAAiB;;;QAAjB,0IAAiB;;;;;;;;;;;;;;ACCjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AAEX;AAET;;AAY/B,MAAM,SAAS;;kEAAT,SAAS;wFAAT,SAAS,cAFR,2DAAY;6FADb,CAAC,kDAAK,CAAC,YAHT;YACP,uEAAa;SACd;mIAIU,SAAS,mBARlB,2DAAY,aAGZ,uEAAa;;;;;;;;;;;;;ACXjB;AAAA;AAAA;AAAA;AAAA;AAAwC;;AAejC,MAAM,KAAK;IAEd,cAAc;;QACV,IAAI,MAAM,GAAG,IAAI,qDAAQ,EAAE,CAAC;QAC5B,IAAI,GAAG,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;QAC7B,MAAM,IAAI,GAAiB;YACvB,WAAW,QAAE,GAAG,CAAC,OAAO,CAAC,IAAI,mCAAG,SAAS;YACzC,cAAc,QAAE,GAAG,CAAC,OAAO,CAAC,OAAO,mCAAG,SAAS;YAC/C,MAAM,QAAE,GAAG,CAAC,EAAE,CAAC,IAAI,mCAAG,SAAS;YAC/B,SAAS,QAAE,GAAG,CAAC,EAAE,CAAC,OAAO,mCAAG,SAAS;YACrC,UAAU,EAAE,SAAS,CAAC,QAAQ;SAEjC,CAAC;QAEF,OAAO,IAAI,CAAC;IAChB,CAAC;;0DAfQ,KAAK;wFAAL,KAAK,WAAL,KAAK,mBAHF,MAAM;;;;;;;;;;;;;;;;;;;ACbyB;AAGF;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;;;;;;ACXpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,qC","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\nimport { Utils } from './utils/utils';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n\n  public info: any ;\n\n  constructor(\n    private utils: Utils,\n  ){}\n\n  ngOnInit(){\n    this.info = this.utils.getMachineInfo();\n  }\n\n}\n","{{ info | json }}","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\nimport { Utils } from './utils/utils';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [Utils],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\r\nimport { UAParser } from 'ua-parser-js';\r\nimport {} from '@angular/platform-browser';\r\n\r\ninterface ImachineInfo{\r\n    browserName: string;\r\n    browserVersion: string;\r\n    osName: string;\r\n    osVersion: string;\r\n    osVersion2: string;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class Utils{\r\n    \r\n    getMachineInfo(){\r\n        let parser = new UAParser();\r\n        let res = parser.getResult();\r\n        const info: ImachineInfo = {\r\n            browserName: res.browser.name?? 'Unknown',\r\n            browserVersion: res.browser.version?? 'Unknown',\r\n            osName: res.os.name?? 'Unknown',\r\n            osVersion: res.os.version?? 'Unknown',\r\n            osVersion2: navigator.platform\r\n\r\n        };\r\n\r\n        return info;\r\n    }\r\n}","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}